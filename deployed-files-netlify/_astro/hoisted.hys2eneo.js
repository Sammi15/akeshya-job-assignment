class a{constructor(){this.registerEventListeners()}registerEventListeners(){const e=document.querySelectorAll(".purecounter");if(this.intersectionListenerSupported()){const t=new IntersectionObserver(this.animateElements.bind(this),{root:null,rootMargin:"20px",threshold:.5});for(let r=0;r<e.length;r++)t.observe(e[r])}else window.addEventListener&&(this.animateLegacy(e),window.addEventListener("scroll",()=>this.animateLegacy(e),{passive:!0}))}animateLegacy(e){for(let t=0;t<e.length;t++)this.parseConfig(e[t]).legacy&&this.elementIsInView(e[t])&&this.animateElements([{target:e[t]}])}animateElements(e,t){e.forEach(r=>{const n=r.target?this.parseConfig(r.target):this.parseConfig(r);n.duration<=0?r.target.innerHTML=n.end.toFixed(n.decimals):!t&&!this.elementIsInView(r.target)||t&&r.intersectionRatio<.5?r.target.innerHTML=n.start>n.end?n.end.toString():n.start.toString():setTimeout(()=>{r.target?this.startCounter(r.target,n):this.startCounter(r,n)},n.delay)})}startCounter(e,t){let r=(t.end-t.start)/(t.duration/t.delay),n="inc";t.start>t.end&&(n="dec",r*=-1),r<1&&t.decimals<=0&&(r=1);let i=t.decimals<=0?parseInt(t.start.toString()):parseFloat(t.start.toString());e.innerHTML=i.toString(),t.once&&e.setAttribute("data-purecounter-duration","0");const s=setInterval(()=>{i+=r,e.innerHTML=this.formatNumber(i,t),(i>=t.end&&n==="inc"||i<=t.end&&n==="dec")&&(clearInterval(s),i!=t.end&&(e.innerHTML=t.decimals<=0?parseInt(t.end.toString()).toString():parseFloat(t.end.toString()).toFixed(t.decimals)))},t.delay)}parseConfig(e){const t=[].filter.call(e.attributes,n=>/^data-purecounter-/.test(n.name)),r={start:0,end:9001,duration:2e3,delay:10,once:!0,decimals:0,legacy:!0};return t.forEach(n=>{const i=n.name.replace("data-purecounter-","").toLowerCase();i==="duration"?r[i]=parseInt((1e3*this.castDataType(n.value)).toString()):r[i]=this.castDataType(n.value)},this),r}formatNumber(e,t){return t.decimals<=0?Math.floor(e).toString():e.toLocaleString(void 0,{minimumFractionDigits:t.decimals,maximumFractionDigits:t.decimals})}castDataType(e){return/^[0-9]+\.[0-9]+$/.test(e)?parseFloat(e):/^[0-9]+$/.test(e)?parseInt(e):0}elementIsInView(e){const t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)}intersectionListenerSupported(){return"IntersectionObserver"in window&&"IntersectionObserverEntry"in window&&"intersectionRatio"in window.IntersectionObserverEntry.prototype}}new a;
